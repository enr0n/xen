// WARNING: This file has automatically been generated on Sat, 20 Jul 2019 14:06:09 EDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package libxl

/*
#cgo LDFLAGS: -L${SRCDIR}/../libxl -lxenlight
#include <libxl.h>
#include <libxl_utils.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// ctxAlloc function as declared in libxl/libxl.h:1446
func ctxAlloc(pctx **Ctx, version int32, flags uint32, lg *XentoollogLogger) int32 {
	cpctx, _ := (**C.libxl_ctx)(unsafe.Pointer(pctx)), cgoAllocsUnknown
	cversion, _ := (C.int)(version), cgoAllocsUnknown
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	clg, _ := (*C.xentoollog_logger)(unsafe.Pointer(lg)), cgoAllocsUnknown
	__ret := C.libxl_ctx_alloc(cpctx, cversion, cflags, clg)
	__v := (int32)(__ret)
	return __v
}

// ctxFree function as declared in libxl/libxl.h:1449
func ctxFree(ctx *Ctx) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.libxl_ctx_free(cctx)
	__v := (int32)(__ret)
	return __v
}

// domainCreateNew function as declared in libxl/libxl.h:1457
func domainCreateNew(ctx *Ctx, dConfig *DomainConfig, domID *uint32, aoHow *AsyncopHow, aopConsoleHow *AsyncprogressHow) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdConfig, _ := dConfig.PassRef()
	cdomID, _ := (*C.uint32_t)(unsafe.Pointer(domID)), cgoAllocsUnknown
	caoHow, _ := (*C.libxl_asyncop_how)(unsafe.Pointer(aoHow)), cgoAllocsUnknown
	caopConsoleHow, _ := (*C.libxl_asyncprogress_how)(unsafe.Pointer(aopConsoleHow)), cgoAllocsUnknown
	__ret := C.libxl_domain_create_new(cctx, cdConfig, cdomID, caoHow, caopConsoleHow)
	__v := (int32)(__ret)
	return __v
}

// domainShutdown function as declared in libxl/libxl.h:1570
func domainShutdown(ctx *Ctx, domID uint32) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdomID, _ := (C.uint32_t)(domID), cgoAllocsUnknown
	__ret := C.libxl_domain_shutdown(cctx, cdomID)
	__v := (int32)(__ret)
	return __v
}

// domainReboot function as declared in libxl/libxl.h:1571
func domainReboot(ctx *Ctx, domID uint32) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdomID, _ := (C.uint32_t)(domID), cgoAllocsUnknown
	__ret := C.libxl_domain_reboot(cctx, cdomID)
	__v := (int32)(__ret)
	return __v
}

// domainDestroy function as declared in libxl/libxl.h:1572
func domainDestroy(ctx *Ctx, domID uint32, aoHow *AsyncopHow) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdomID, _ := (C.uint32_t)(domID), cgoAllocsUnknown
	caoHow, _ := (*C.libxl_asyncop_how)(unsafe.Pointer(aoHow)), cgoAllocsUnknown
	__ret := C.libxl_domain_destroy(cctx, cdomID, caoHow)
	__v := (int32)(__ret)
	return __v
}

// domainInfo function as declared in libxl/libxl.h:1712
func domainInfo(arg0 *Ctx, infoR *DomInfo, domID uint32) int32 {
	carg0, _ := (*C.libxl_ctx)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cinfoR, _ := infoR.PassRef()
	cdomID, _ := (C.uint32_t)(domID), cgoAllocsUnknown
	__ret := C.libxl_domain_info(carg0, cinfoR, cdomID)
	__v := (int32)(__ret)
	return __v
}

// nameToDomID function as declared in libxl/libxl_utils.h:27
func nameToDomID(ctx *Ctx, name string, domID *uint32) int32 {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	cdomID, _ := (*C.uint32_t)(unsafe.Pointer(domID)), cgoAllocsUnknown
	__ret := C.libxl_name_to_domid(cctx, cname, cdomID)
	runtime.KeepAlive(name)
	__v := (int32)(__ret)
	return __v
}

// domidToName function as declared in libxl/libxl_utils.h:29
func domidToName(ctx *Ctx, domID uint32) string {
	cctx, _ := (*C.libxl_ctx)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cdomID, _ := (C.uint32_t)(domID), cgoAllocsUnknown
	__ret := C.libxl_domid_to_name(cctx, cdomID)
	return C.GoString(__ret)
}
